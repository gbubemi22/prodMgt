const StatusCodes = require("http-status-codes");
const createProduct = require("../controllers/productController");
const { ACCOUNT_TYPES } = require("../constant/");
// User with valid email and password logs in successfully
// Generated by CodiumAI

describe("code snippet", () => {
  it("should log in successfully when user provides valid email and password", async () => {
    const { req, res } = initializeReqRes();
    await code_under_test.login(req, res);
    expect(res.status).toHaveBeenCalledWith(200);
    expect(res.json).toHaveBeenCalledWith({
      /* your expected response data */
    });
  });

  it("should create seller successfully when email and number are unique", async () => {
    const { req, res } = initializeReqRes();
    await code_under_test.createSeller(req, res);
    expect(res.status).toHaveBeenCalledWith(201);
    expect(res.json).toHaveBeenCalledWith({
      /* your expected response data */
    });
  });

  // Seller with valid email and password logs in successfully
  it("should log in successfully when seller provides valid email and password", async () => {
    const req = {
      body: {
        email: "test@example.com",
        password: "password123",
      },
    };
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };

    await code_under_test.login(req, res);

    expect(res.status).toHaveBeenCalledWith(StatusCodes.OK);
    expect(res.json).toHaveBeenCalledWith({
      user: {
        email: "test@example.com",
        userType: ACCOUNT_TYPES.SELLER,
        id: expect.any(String),
      },
      token: expect.any(String),
    });
  });
});

// User with missing email or password throws BadRequestError
// it('should throw BadRequestError when user does not provide email or password', async () => {
//   const req = {
//     body: {}
//   };
//   const res = {
//     status: jest.fn().mockReturnThis(),
//     json: jest.fn()
//   };

//   await expect(code_under_test.login(req, res)).rejects.toThrow(CustomError.BadRequestError);
//   expect(res.status).toHaveBeenCalledWith(401);
//   expect(res.json).toHaveBeenCalledWith({
//     message: 'Please provide email and password'
//   });
// }),

// // Seller with existing email throws ConflictError
// it('should throw ConflictError when seller provides an existing email', async () => {
//   const req = {
//     body: {
//       email: 'test@example.com',
//       password: 'password123'
//     }
//   };
//   const res = {
//     status: jest.fn().mockReturnThis(),
//     json: jest.fn()
//   };

//   await expect(code_under_test.createSeller(req, res)).rejects.toThrow(CustomError.ConflictError);
//   expect(res.status).toHaveBeenCalledWith(StatusCodes.CONFLICT);
//   expect(res.json).toHaveBeenCalledWith({
//     message: 'Email already exists'
//   });
// }),

// Seller with existing number throws ConflictError
// it('should throw ConflictError when seller provides an existing number', async () => {
//   const req = {
//     body: {
//       number: '1234567890',
//       email: 'test@example.com',
//       last_name: 'Doe',
//       first_name: 'John',
//       password: 'password123'
//     }
//   };
//   const res = {
//     status: jest.fn().mockReturnThis(),
//     json: jest.fn()
//   };

//   await expect(code_under_test.createSeller(req, res)).rejects.toThrow(CustomError.ConflictError);
//   expect(res.status).toHaveBeenCalledWith(StatusCodes.CONFLICT);
//   expect(res.json).toHaveBeenCalledWith({
//     message: 'Number already exists'
//   });
// }),
// });
